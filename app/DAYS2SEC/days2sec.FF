$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$DOCUMENT NULL
   When processed by ufpp the help text and version text are converted to the
   routines help_usage(3f) and help_version(3f)

   To compile:

      ccall days2sec.FF

   To run the tests:

      ufpp UFPP_TEST -verbose -system -i days2sec.FF

   To generate standard days2sec.f90 to give to non-ufpp users:

      ufpp TESTPRG90 -i days2sec.FF  >days2sec.f90

   Uses

      ufpp
      goodbad
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IF DEFINED(TESTPRG90) ! Place test program source here
$! this is converted into the help_usage subroutine by ufpp ...
$DOCUMENT HELP -file days2sec.1.man
NAME
   days2sec(1f) - [TIME] Convert [[-]dd-][[hh:]mm:]ss to seconds
   (LICENSE:PD)

SYNOPSIS
   days2sec dd-hh:mm:ss | --version| --help
   days2sec NNdNNhNNmNNs 

DESCRIPTION
   Given a duration in the form dd-hh:mm:ss where dd is days, hh hours,
   mm minutes and ss seconds convert it to seconds. Many utilities (ps(1),
   for example) show times in this format to make it more intelligible;
   but it generally easier to perform math on values represented in
   seconds.

OPTIONS
   dd-hh:mm:ss  Given a string representing a duration of time in the
                following forms:

                  dd-hh:mm:ss
                     hh:mm:ss
                        mm:ss
                           ss

                convert it to seconds.

                The numeric values may represent floating point numbers.

                Spaces are ignored.

    NNdNNhNNmNNs  Simple numeric values may also be used with unit suffixes;
                  where s,m,h, or d represents seconds, minutes, hours
                  or days and w represents weeks. Allowed aliases for w,d,h,m, and s units are

                   w -  weeks,week,wk,wks
                   d -  days,day
                   m -  minutes,minute,min
                   h -  hours,hour,hrs,hr
                   s -  seconds,second,sec,secs

                  The numeric values may represent floating point numbers.

                  Spaces, commas  and case are ignored.

   --denominator  divide the result by this value. Default is one(1).
   --help         display this help and exit
   --version      output version information and exit

EXAMPLE
  Usage

    days2sec 1-12:04:20
    129860
    days2sec 1.5 days
    129600
    days2sec 1.5 days 4hrs 30minutes
    145800
    days2sec 10s 10S 10s # DUPLICATES WITH UNITS ARE ALLOWED
    30
    days2sec 1 1 1  # SPACES ARE IGNORED
    111
SEE ALSO
    sec2days(1)
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$! this is converted into the help_version subroutine by ufpp ...
$! To work with what(1), do not use ",>,\ characters
$DOCUMENT VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        days2sec(1f)
DESCRIPTION:    convert dd-hh:mm:ss string to seconds
VERSION:        1.0, 2016-06-17
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
program demo_days2sec
use M_kracken95, only: kracken, sget, lget, rget
use M_time,    only: days2sec
use M_strings, only: v2s
implicit none
character(len=*),parameter   :: ident="@(#)days2sec(1): given string of form dd-hh:mm:ss convert to seconds"
character(len=:),allocatable :: printline
   call kracken('days2sec',' -oo -help .F. -version .F. -denominator 1')     ! parse command line
   call help_usage(lget('days2sec_help'))                                    ! display help information and stop if true
   call help_version(lget('days2sec_version'))                               ! display version information and stop if true
   ! get value from command line with SGET, convert to seconds with DAYS2SEC, and make into a nicer value string with V2S
   printline=v2s(days2sec(sget('days2sec_oo'))/rget('days2sec_denominator')) ! not in write statement so error message will print
   write(*,'(a)')printline
end program demo_days2sec
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IF defined(UFPP_TEST)
$! Beginning of tests
$!
$! if command not in path exit
$SYSTEM inpath days2sec
$! Flag in database that testing has begun
$SYSTEM goodbad days2sec start -section 1
$! Make scratch directory at current location
$!==============================================================================
$SYSTEM mkdir -p tmp/
$SYSTEM days2sec 1-12:10:20           > tmp/_days2sec_out.txt
$SYSTEM days2sec 12345               >> tmp/_days2sec_out.txt
$SYSTEM days2sec 12:10               >> tmp/_days2sec_out.txt
$SYSTEM days2sec 300:00              >> tmp/_days2sec_out.txt
$SYSTEM days2sec 4:10:04             >> tmp/_days2sec_out.txt
$SYSTEM days2sec 1d 1h               >> tmp/_days2sec_out.txt
$SYSTEM days2sec 1h2.5m10s           >> tmp/_days2sec_out.txt
$SYSTEM days2sec 1.5 hours           >> tmp/_days2sec_out.txt
$SYSTEM days2sec 1.0 days 1.0 hours  >> tmp/_days2sec_out.txt
$SYSTEM cat tmp/_days2sec_out.txt
$!==============================================================================
$OUTPUT tmp/_days2sec_expected.txt
130220
12345
730
18000
15004
90000
3760
5400
90000
$OUTPUT
$!==============================================================================
$!    Compare expected output with program output
$SYSTEM diff tmp/_days2sec_out.txt tmp/_days2sec_expected.txt
$SYSTEM goodbad days2sec good -section 1
$SYSTEM rm -f tmp/_days2sec_out.txt tmp/_days2sec_expected.txt
$SYSTEM rmdir --ignore-fail-on-non-empty tmp
$!==============================================================================
$ENDIF
$!==============================================================================
