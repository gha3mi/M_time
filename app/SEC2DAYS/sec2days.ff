$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$DOCUMENT NULL

   An example of using ufpp(1) to allow code and tests and basic text
   documentation to all be kept in a single file which generates output
   that can be used to make man(1) pages, and help routines for the
   program automatically.

   When processed by ufpp the help text and version text are converted
   to the routines help_usage(3f) and help_version(3f)

      # optionally have help text go to a "doc" directory
      export UFPP_DOCUMENT_DIR=$HOME
      mkdir -p $HOME/doc
   
      # expand program to be compiled and write document to "doc" directory
      ufpp TESTPRG90 -i sec2days.ff  >sec2days.f90
   
      # compile and load program
      gfortran sec2days.f90 -I libGPF
   
      # convert help text to a man(1) page
      mkdir -p $HOME/man/man1
      txt2man $HOME/doc/sec2days.1.man > $HOME/man/man1/sec2days.1.gz
   
      # test using man(1) page
      env MANDIR=$HOME/man man sec2days

   To run the tests

      ufpp UFPP_TEST -i sec2days.ff -system -verbose

   Uses

         ufpp
      goodbad
      txt2man

   These tools can be used as components to create highly automated
   build environments.

   Typically, make(1) files or scripts are used to automate several of
   these steps.  The use of goodbad(1) and txt2man(1) are optional. Other
   utilities to record unit testing results and to convert flat text to
   man(1) pages or HTML documents, ...  can be used or not used at all.

   For example, in my environment I just enter "ccall sec2days.ff" and
   the script figures out which compiler and compiler switches to use
   including where the "libGPF" files are, knows where to put man(1)
   pages and executables, and builds and installs the executable and
   man page and records a log file of all those actions.

   To build all objects and executables and documentation and run unit
   tests a command called "make.shell" is used. The rest is automated
   except for looking at the results and making changes accordingly.

$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IF DEFINED(TESTPRG90) ! Place test program source here
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$!
$! this is converted into the help_usage subroutine by ufpp ...
$!
$DOCUMENT HELP -file sec2days.1.man
NAME
   sec2days(1f) - [TIME] Convert seconds to string of form dd-hh:mm:ss
   (LICENSE:PD)

SYNOPSIS
   sec2days nnnn[.xxx] [ -crop]| --version| --help

DESCRIPTION
   Given a numeric string representing seconds convert it to a string
   of the form

      dd-hh:mm:ss

   where dd is days, hh hours, mm minutes and ss seconds.

OPTIONS
   nnnn[.xxx]  number of seconds to convert to string of form dd-hh:mm:ss.
               nnnn may be interspersed with unit codes d,h,m,s. Spaces,
               commas and case are ignored. Allowed aliases for the unit
               codes are
                 d  days and day 
                 h  hours,hour,hrs, and hr  
                 m  minutes,minute and min 
                 s  seconds,second and sec 

   -crop       trim leading zero values from output
   -radix      character used as decimal separator
   --help      display this help and exit
   --version   output version information and exit

EXAMPLE
 usage

   sec2days 129860
   1-12:04:20
   sec2days 1d2h3m4s
   1-02:03:04
   sec2days 1.0 days 2 hours 3 minutes 4 seconds
   1-02:03:04
   sec2days 1.5d
   1-12:00:00

AUTHOR
   John S. Urban
LICENSE
   Public Domain
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$! this is converted into the help_version subroutine by ufpp ...
$! To work with what(1), do not use ",>,\ characters in the descriptions
$DOCUMENT VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        sec2days(1f)
DESCRIPTION:    convert seconds to string of form dd-hh:mm:ss
VERSION:        1.0, 2016-06-17
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
program demo_sec2days
use M_kracken95, only : kracken, lget, sget, IPvalue
use M_time,    only : sec2days, realtime
use M_strings, only : substitute
implicit none
character(len=*),parameter     :: ident="@(#)sec2days(1f): convert seconds to string of form dd-hh:mm:ss"
character(len=:),allocatable   :: strlocal
character(len=:),allocatable   :: radix
character(len=IPvalue)         :: line
   call kracken('sec2days',' -oo -crop .F -radix . -help .F. -version .F.') ! parse command line
   call help_usage(lget('sec2days_help'))                                   ! display help information and stop if true
   call help_version(lget('sec2days_version'))                              ! display version information and stop if true
   radix=trim(sget('sec2days_radix'))
   line=sget('sec2days_oo')
   if(radix.ne.'.')then
      call substitute(line,'.',' ')
      call substitute(line,radix,'.')
   endif  
   strlocal=sec2days(trim(line),lget('sec2days_crop')) ! get command line option and convert to dd-hh:mm:ss string
   write(*,'(a)')strlocal
end program demo_sec2days
$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$IF defined(UFPP_TEST)

   Beginning of unit tests for sec2days(1f)
  
   if command not in path exit
$SYSTEM inpath sec2days

   Flag in database that testing has begun

$SYSTEM goodbad sec2days start -section 1

   Make scratch directory at current location

$SYSTEM mkdir -p tmp/

   execute command and build output file of expected results
$SYSTEM sec2days 130220                         > tmp/_sec2days_out.txt
$SYSTEM sec2days 12345                         >> tmp/_sec2days_out.txt
$SYSTEM sec2days 730                           >> tmp/_sec2days_out.txt
$SYSTEM sec2days 18000                         >> tmp/_sec2days_out.txt
$SYSTEM sec2days 15004                         >> tmp/_sec2days_out.txt
$SYSTEM sec2days 100,000                       >> tmp/_sec2days_out.txt
$SYSTEM sec2days 1d 2.0 hr 3 minutes 4seconds  >> tmp/_sec2days_out.txt
$SYSTEM sec2days 1.50 d                        >> tmp/_sec2days_out.txt
$SYSTEM sec2days 1 000,5  -radix ,             >> tmp/_sec2days_out.txt

$SYSTEM cat tmp/_sec2days_out.txt

   create file of expected results

$OUTPUT tmp/_sec2days_expected.txt
1-12:10:20
0-03:25:45
0-00:12:10
0-05:00:00
0-04:10:04
1-03:46:40
1-02:03:04
1-12:00:00
0-00:16:40
$OUTPUT

      Compare expected output with program output

$SYSTEM diff tmp/_sec2days_out.txt tmp/_sec2days_expected.txt

      Assume if got here that tests were passed and so 
      record success in the SQLite database maintained via
      the goodbad(1) command

$SYSTEM goodbad sec2days good -section 1

      Clean up scratch files when successful

$SYSTEM rm -f tmp/_sec2days_out.txt tmp/_sec2days_expected.txt
$SYSTEM rmdir --ignore-fail-on-non-empty tmp
      
      End of unit tests

$ENDIF
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
