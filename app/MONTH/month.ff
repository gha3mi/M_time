$ifdef TESTPRG90
!===================================================================================================================================
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!===================================================================================================================================
program month_exe
use M_kracken95, only : kracken,iget,lget,sget                       ! command line parsing
use M_time,    only : box_month, mo2v                                ! date and time 
implicit none
character(len=*),parameter :: ident="@(#)month(1f):print calendar"
character(len=21)       :: calen(8)='                    '           ! character array to hold month
character(len=(21+2)*3) :: calenyear(8*4)='                      '   ! character array to hold year
integer                 :: month                                     ! values of command line options
integer                 :: dat_values(8)                             ! date array
integer                 :: r,c                                       ! row and column for month in one-year calendar
character(len=21)       :: cscr
   call date_and_time(values=dat_values)                             ! get current time and date
   call kracken('month',' -year -month 0 -help .f. -version .f.')    ! crack command line arguments
   call help_usage(lget('month_help'))                               ! print help information and stop if requested
   call help_version(lget('month_version'))                          ! print version information and stop if requested
!-----------------------------------------------------------------------------------------------------------------------------------
! use user-specified year date instead of current year. Try reading year from two places (-oo and -year) on command line
   if(sget('month_year').ne.' ')then                                 ! check -year option for a year value
      dat_values(1)=iget('month_year')                               ! if value was specified use it
   elseif(sget('month_oo').ne.' ')then
         dat_values(1)=iget('month_oo')                              ! check -oo option for a year value if did not find -year VALUE
   endif
   write(*,*)'YEAR=',dat_values(1)
!-----------------------------------------------------------------------------------------------------------------------------------
   cscr=sget('month_month')                                          ! get month as string so can see if name or number or blank
   if(cscr.ne.'')then
      select case(cscr(1:1))
      case('A':'Z','a':'z')                                          ! assume month name instead of month number
        month=mo2v(trim(cscr))
      case default                                                   ! month is number
         month=iget('month_month')
      end select
   else                                                              ! keyword given but no value, default to current month
      month=dat_values(2)
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
   if(month.eq.0)then                                                ! no month specified, display an entire year
      do r=1,4                                                       ! display year in four rows
         do c=1,3                                                    ! three months per row
            dat_values(2)=c+(r-1)*3
            call box_month(dat_values,calen)
            calenyear(8*r-7:8*r)(23*c-22:23*c)=calen                 ! copy month into large year array
         enddo
      enddo
      write(*,'(a)')calenyear
   else                                                              ! do a month
      dat_values(2)=month
      call box_month(dat_values,calen)
      write(*,'(a)')calen
   endif
!-----------------------------------------------------------------------------------------------------------------------------------
contains
!-----------------------------------------------------------------------------------------------------------------------------------
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!-----------------------------------------------------------------------------------------------------------------------------------
$DOCUMENT HELP -file month.1.man
NAME
   month(1f) - [TIME] display a calendar
   (LICENSE:PD)

SYNOPSIS
   month [[ -year] NNNN] [ -month NN|month_name]

DESCRIPTION
   month(1) displays a simple calendar. If no arguments are specified,
   the current year is displayed.

OPTIONS
   -month      Display single month output. The month is numeric (1-12)
               or a month name or blank. If blank the current month is assumed.

   -year NNNN  Select the year to display. A year starts on Jan 1st.

   -help       Display help text and exit.
   -version    Display version information and exit.

EXAMPLES
      month -month 12

       >    December 2015
       >Mo Tu We Th Fr Sa Su
       >    1  2  3  4  5  6
       > 7  8  9 10 11 12 13
       >14 15 16 17 18 19 20
       >21 22 23 24 25 26 27
       >28 29 30 31

      month -month April # month names may be given instead of numbers
AUTHOR
   John S. Urban
LICENSE
   Public Domain
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
$DOCUMENT VERSION
PRODUCT:        GPF (General Purpose Fortran) utilities and examples
PROGRAM:        month(1f)
DESCRIPTION:    displays simple calendar
VERSION:        1.0, 2015-12-20
AUTHOR:         John S. Urban
REPORTING BUGS: http://www.urbanjost.altervista.org/
HOME PAGE:      http://www.urbanjost.altervista.org/index.html
LICENSE:        Public Domain. This is free software: you are free to change and redistribute it.
                There is NO WARRANTY, to the extent permitted by law.
$DOCUMENT END
$!@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
!-----------------------------------------------------------------------------------------------------------------------------------
!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()!
!-----------------------------------------------------------------------------------------------------------------------------------
end program month_exe
$else
$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
   This begins the section that will be processed by ufpp. Typically it is called by
   ufpp -system -html -verbose -i FILENAME
   if $SYSTEM commands are trusted

 UNIT TEST OF month

   First, make sure you have a scratch directory
$SYSTEM mkdir -p tmp/

   Initialize entry in regression test database
$SYSTEM goodbad month start -section 1

   Make template file for regression test
$OUTPUT tmp/_year.template
    January 2015           February 2015           March 2015
Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su
          1  2  3  4                      1                      1
 5  6  7  8  9 10 11    2  3  4  5  6  7  8    2  3  4  5  6  7  8
12 13 14 15 16 17 18    9 10 11 12 13 14 15    9 10 11 12 13 14 15
19 20 21 22 23 24 25   16 17 18 19 20 21 22   16 17 18 19 20 21 22
26 27 28 29 30 31      23 24 25 26 27 28      23 24 25 26 27 28 29
                                              30 31
     April 2015              May 2015               June 2015
Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su
       1  2  3  4  5                1  2  3    1  2  3  4  5  6  7
 6  7  8  9 10 11 12    4  5  6  7  8  9 10    8  9 10 11 12 13 14
13 14 15 16 17 18 19   11 12 13 14 15 16 17   15 16 17 18 19 20 21
20 21 22 23 24 25 26   18 19 20 21 22 23 24   22 23 24 25 26 27 28
27 28 29 30            25 26 27 28 29 30 31   29 30

      July 2015             August 2015          September 2015
Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su
       1  2  3  4  5                   1  2       1  2  3  4  5  6
 6  7  8  9 10 11 12    3  4  5  6  7  8  9    7  8  9 10 11 12 13
13 14 15 16 17 18 19   10 11 12 13 14 15 16   14 15 16 17 18 19 20
20 21 22 23 24 25 26   17 18 19 20 21 22 23   21 22 23 24 25 26 27
27 28 29 30 31         24 25 26 27 28 29 30   28 29 30
                       31
    October 2015           November 2015          December 2015
Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su   Mo Tu We Th Fr Sa Su
          1  2  3  4                      1       1  2  3  4  5  6
 5  6  7  8  9 10 11    2  3  4  5  6  7  8    7  8  9 10 11 12 13
12 13 14 15 16 17 18    9 10 11 12 13 14 15   14 15 16 17 18 19 20
19 20 21 22 23 24 25   16 17 18 19 20 21 22   21 22 23 24 25 26 27
26 27 28 29 30 31      23 24 25 26 27 28 29   28 29 30 31
                       30
$OUTPUT

        Run the program
$SYSTEM month 2015 >tmp/_year.out

        Test for expected output and update regression test database accordingly
$SYSTEM diff -b tmp/_year.out tmp/_year.template && goodbad month good -section 1|| goodbad month bad -section 1

       Clean up scratch files
$SYSTEM rm -f tmp/_year.template tmp/_year.out

$!==================================================================================================================================
$!()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()()
$!==================================================================================================================================
$endif
