name: fpm test

on: [push, pull_request]

jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
        - os: ubuntu-latest
          gcc_v: 9
        - os: macos-latest
          gcc_v: 9
        - os: windows-latest
          gcc_v: 8

    env:
      FC: gfortran
      GCC_V: ${{ matrix.gcc_v }}
      TZ: UTC+04:00

    steps:
    - name: Checkout code
      uses: actions/checkout@v1

    - name: Install GFortran macOS
      if: contains(matrix.os, 'macos')
      run: |
          ls /usr/local/bin/gfortran-*
          ln -s /usr/local/bin/gfortran-${GCC_V} /usr/local/bin/gfortran
          which gfortran-${GCC_V}
          which gfortran

    - name: Install GFortran Linux
      if: contains(matrix.os, 'ubuntu')
      run: |
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${GCC_V} 100 \
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${GCC_V} \
        --slave /usr/bingcov gcov /usr/bin/gcov-${GCC_V}

    - name: Install GFortran Windows
      if: contains(matrix.os, 'windows')
      run: |
            gfortran --version
            fpm test --profile release
      env:
        PATH = "C:\msys64\mingw64\bin;C:\msys64\usr\bin;$env:PATH"

    - name: Install fpm
      uses: fortran-lang/setup-fpm@v3
      with:
        use-haskell: ${{ matrix.haskell }}
        github-token: ${{ secrets.GITHUB_TOKEN }}

    - name: Display environment
      run: |
        #make -k -p -fNOTTHERE
        echo "end" > foo.f90
        gfortran -cpp -E -dM foo.f90
        gfortran --version
        fpm --version

    - name: Display environment2
      run: |
        #make -k -p -fNOTTHERE
        echo "end" > foo.f90
        gfortran -cpp -E -dM foo.f90
        gfortran --version
        fpm --version

    - name: tests Linux
      if: contains(matrix.os, 'ubuntu')
      run: fpm test --profile release

    - name: tests MacOS
      if: contains(matrix.os, 'macos')
      run: fpm test --profile release

    - name: tests MSWindows
      if: contains(matrix.os, 'windows')
      run: fpm test --profile release -flag "-D _WIN32"
      env:
        PATH = "C:\msys64\mingw64\bin;C:\msys64\usr\bin;$env:PATH"

#    - name: Run demo programs (fpm run)
#      run: fpm run --profile release

    - name: cleanup Linux
      if: contains(matrix.os, 'ubuntu')
      run: ls -ltras
    - name: cleanup MacOS
      if: contains(matrix.os, 'macos')
      run: ls -ltras
    - name: cleanup MSWindows
      if: contains(matrix.os, 'windows')
      run: dir
################################################################################
  # Build with Intel toolchain
  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        fc: [ifort]
        cc: [icc]

    env:
      FC: ${{ matrix.fc }}
      CC: ${{ matrix.cc }}
      APT_PACKAGES: >-
        intel-oneapi-compiler-fortran
        intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic
        intel-oneapi-mkl-devel
        asciidoctor

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Add Intel repository
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI compiler
      run: |
        sudo apt-get install ${{ env.APT_PACKAGES }}
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Run Intel unit tests on Linux
      run: fpm test --profile release
      env:
        OMP_NUM_THREADS: 2,1
################################################################################

